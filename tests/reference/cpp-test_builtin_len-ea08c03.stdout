#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

void _lpython_main_program()
{
    test_len();
}

void test_len()
{
    int i;
    std::string s;
    std::string t;
    s = "abcd";
    assert (s.size() == 4);
    s = "";
    assert (s.size() == 0);
    assert (std::string("abcd").size() == 4);
    assert (std::string("").size() == 0);
    t = "efg";
    s = std::string("abcd") + std::string(t);
    i = s.size();
    assert (i == 7);
    i = std::string(std::string("abc") + std::string("def")).size();
    assert (i == 6);
}

namespace {

void main2() {
        _lpython_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
